generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  email              String
  name               String?
  bio                String?
  picture            String?
  github             String?
  company            String?
  references         String?
  twitter            String?
  address            String?
  lat                Float?
  lng                Float?
  timezone           String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  organizerKey       String?
  organizerKeyAccess OrganizerKeyAccess?  @relation(fields: [organizerKey], references: [id])
  talks              Talk[]               @relation("speakers_talks")
  proposals          Proposal[]           @relation("speakers_proposals")
  organizations      OrganizationMember[]
  ratings            Rating[]
  surveys            Survey[]
  createdTalks       Talk[]
  createdEvents      Event[]
  messages           Message[]
  invites            Invite[]
  accounts           Account[]

  @@map("users")
}

model Account {
  uid       String   @id
  email     String
  name      String?
  picture   String?
  provider  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model OrganizerKeyAccess {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  users     User[]

  @@map("organizer_key_access")
}

model Talk {
  id         String     @id @default(uuid())
  title      String
  abstract   String
  level      TalkLevel?
  languages  Json?
  references String?
  creatorId  String
  creator    User       @relation(fields: [creatorId], references: [id])
  archived   Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  speakers   User[]     @relation("speakers_talks")
  proposals  Proposal[]
  invitation Invite?

  @@map("talks")
}

enum TalkLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Event {
  id                       String          @id @default(uuid())
  slug                     String          @unique
  name                     String
  description              String?
  type                     EventType       @default(CONFERENCE)
  visibility               EventVisibility @default(PRIVATE)
  organizationId           String
  organization             Organization    @relation(fields: [organizationId], references: [id])
  address                  String?
  lat                      Float?
  lng                      Float?
  timezone                 String?
  contactEmail             String?
  websiteUrl               String?
  codeOfConductUrl         String?
  logo                String?
  conferenceStart          DateTime?
  conferenceEnd            DateTime?
  cfpStart                 DateTime?
  cfpEnd                   DateTime?
  formats                  EventFormat[]
  formatsRequired          Boolean         @default(false)
  categories               EventCategory[]
  categoriesRequired       Boolean         @default(false)
  maxProposals             Int?
  creatorId                String
  creator                  User            @relation(fields: [creatorId], references: [id])
  archived                 Boolean         @default(false)
  deliberationEnabled      Boolean         @default(false)
  displayOrganizersRatings Boolean         @default(true)
  displayProposalsRatings  Boolean         @default(true)
  displayProposalsSpeakers Boolean         @default(true)
  surveyEnabled            Boolean         @default(false)
  surveyQuestions          Json?
  emailOrganizer           String?
  emailNotifications       Json?
  slackWebhookUrl          String?
  apiKey                   String?
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  proposals                Proposal[]
  surveys                  Survey[]

  @@map("events")
}

model EventFormat {
  id          String     @id @default(uuid())
  name        String
  description String?
  event       Event      @relation(fields: [eventId], references: [id])
  eventId     String
  proposals   Proposal[] @relation("proposals_formats")

  @@map("event_formats")
}

model EventCategory {
  id          String     @id @default(uuid())
  name        String
  description String?
  event       Event      @relation(fields: [eventId], references: [id])
  eventId     String
  proposals   Proposal[] @relation("proposals_categories")

  @@map("event_categories")
}

enum EventType {
  MEETUP
  CONFERENCE
}

enum EventVisibility {
  PUBLIC
  PRIVATE
}

model Organization {
  id         String               @id @default(uuid())
  name       String
  slug       String               @unique
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  members    OrganizationMember[]
  events     Event[]
  invitation Invite?

  @@map("organizations")
}

model OrganizationMember {
  member         User             @relation(fields: [memberId], references: [id])
  memberId       String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  role           OrganizationRole @default(REVIEWER)
  createdAt      DateTime         @default(now())

  @@id([memberId, organizationId])
  @@map("organizations_members")
}

enum OrganizationRole {
  OWNER
  MEMBER
  REVIEWER
}

model Proposal {
  id                  String          @id @default(uuid())
  talkId              String?
  talk                Talk?           @relation(fields: [talkId], references: [id])
  eventId             String
  event               Event           @relation(fields: [eventId], references: [id])
  title               String
  abstract            String
  level               TalkLevel?
  languages           Json?
  references          String?
  comments            String?
  speakers            User[]          @relation("speakers_proposals")
  formats             EventFormat[]   @relation("proposals_formats")
  categories          EventCategory[] @relation("proposals_categories")
  ratings             Rating[]
  avgRateForSort      Float           @default(0)
  status              ProposalStatus  @default(SUBMITTED)
  emailAcceptedStatus EmailStatus?
  emailRejectedStatus EmailStatus?
  submittedAt         DateTime?
  acceptedAt          DateTime?
  rejectedAt          DateTime?
  confirmedAt         DateTime?
  declinedAt          DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  messages            Message[]
  invitation          Invite?

  @@unique([talkId, eventId])
  @@map("proposals")
}

enum ProposalStatus {
  DRAFT
  SUBMITTED
  ACCEPTED
  REJECTED
  CONFIRMED
  DECLINED
}

enum EmailStatus {
  SENT
  DELIVERED
}

model Survey {
  id        String   @unique @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  answers   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, eventId])
  @@map("surveys")
}

model Rating {
  id         String        @id @default(uuid())
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  proposalId String
  proposal   Proposal      @relation(fields: [proposalId], references: [id])
  feeling    RatingFeeling @default(NEUTRAL)
  rating     Int?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([userId, proposalId])
  @@map("ratings")
}

enum RatingFeeling {
  POSITIVE
  NEGATIVE
  NEUTRAL
  NO_OPINION
}

model Message {
  id         String         @id @default(uuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  proposalId String
  proposal   Proposal       @relation(fields: [proposalId], references: [id])
  message    String
  channel    MessageChannel
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@map("messages")
}

enum MessageChannel {
  ORGANIZER
  SPEAKER
}

model Invite {
  id        String     @id @default(uuid())
  type      InviteType
  userId    String
  invitedBy User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  organizationId String?       @unique
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  talkId String? @unique
  talk   Talk?   @relation(fields: [talkId], references: [id], onDelete: Cascade)

  proposalId String?   @unique
  proposal   Proposal? @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("invites")
}

enum InviteType {
  ORGANIZATION
  TALK
  PROPOSAL
}
