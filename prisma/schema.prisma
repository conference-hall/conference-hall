generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  uid                String?
  name               String
  email              String
  bio                String?
  picture            String?
  company            String?
  references         String?
  location           String?
  socialLinks        Json                @default("[]")
  termsAccepted      Boolean             @default(false)
  locale             String              @default("en")
  admin              Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  migrationId        String?
  organizerKey       String?
  organizerKeyAccess OrganizerKeyAccess? @relation(fields: [organizerKey], references: [id])
  talks              Talk[]              @relation("speakers_talks")
  teams              TeamMember[]
  reviews            Review[]
  surveys            Survey[]
  createdTalks       Talk[]
  createdEvents      Event[]
  comments           Comment[]
  commentReactions   CommentReaction[]
  eventsSpeaker      EventSpeaker[]

  @@index([uid])
  @@map("users")
}

model OrganizerKeyAccess {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  users     User[]

  @@map("organizer_key_access")
}

model Talk {
  id             String     @id @default(cuid())
  title          String
  abstract       String
  level          TalkLevel?
  languages      Json       @default("[]")
  references     String?
  creatorId      String
  creator        User       @relation(fields: [creatorId], references: [id])
  archived       Boolean    @default(false)
  invitationCode String     @unique @default(cuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  migrationId    String?
  speakers       User[]     @relation("speakers_talks")
  proposals      Proposal[]

  @@map("talks")
}

enum TalkLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Event {
  id                       String                    @id @default(cuid())
  slug                     String                    @unique
  name                     String
  description              String?
  type                     EventType                 @default(CONFERENCE)
  visibility               EventVisibility           @default(PRIVATE)
  teamId                   String
  team                     Team                      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  location                 String?
  onlineEvent              Boolean                   @default(false)
  timezone                 String
  lat                      Float?
  lng                      Float?
  contactEmail             String?
  websiteUrl               String?
  codeOfConductUrl         String?
  logoUrl                  String?
  conferenceStart          DateTime?
  conferenceEnd            DateTime?
  cfpStart                 DateTime?
  cfpEnd                   DateTime?
  formats                  EventFormat[]
  formatsRequired          Boolean                   @default(false)
  formatsAllowMultiple     Boolean                   @default(false)
  categories               EventCategory[]
  categoriesRequired       Boolean                   @default(false)
  categoriesAllowMultiple  Boolean                   @default(false)
  maxProposals             Int?
  creatorId                String
  creator                  User                      @relation(fields: [creatorId], references: [id])
  archived                 Boolean                   @default(false)
  reviewEnabled            Boolean                   @default(true)
  displayProposalsReviews  Boolean                   @default(true)
  displayProposalsSpeakers Boolean                   @default(true)
  surveyConfig             Json                      @default("{}")
  emailOrganizer           String?
  emailNotifications       Json                      @default("[]")
  slackWebhookUrl          String?
  apiKey                   String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  migrationId              String?
  proposals                Proposal[]
  surveys                  Survey[]
  schedules                Schedule[]
  proposalTags             EventProposalTag[]
  integrations             EventIntegrationConfig[]
  speakers                 EventSpeaker[]
  emailCustomizations      EventEmailCustomization[]

  @@map("events")
}

enum EventType {
  MEETUP
  CONFERENCE
}

enum EventVisibility {
  PUBLIC
  PRIVATE
}

model EventFormat {
  id          String     @id @default(cuid())
  name        String
  description String?
  migrationId String?
  event       Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  proposals   Proposal[] @relation("proposals_formats")

  @@map("event_formats")
}

model EventCategory {
  id          String     @id @default(cuid())
  name        String
  description String?
  migrationId String?
  event       Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  proposals   Proposal[] @relation("proposals_categories")

  @@map("event_categories")
}

model EventProposalTag {
  id        String     @id @default(cuid())
  name      String
  color     String
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  proposals Proposal[] @relation("proposal_to_event_proposal_tags")
  createdAt DateTime   @default(now())

  @@map("event_proposal_tags")
}

model EventIntegrationConfig {
  id            String               @id @default(cuid())
  name          EventIntegrationName
  configuration Json                 @default("{}")
  event         Event                @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId       String

  @@map("event_integration_configurations")
}

enum EventIntegrationName {
  OPEN_AI
  OPEN_PLANNER
}

model Team {
  id             String       @id @default(cuid())
  name           String
  slug           String       @unique
  invitationCode String       @unique @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  migrationId    String?
  members        TeamMember[]
  events         Event[]

  @@map("teams")
}

model TeamMember {
  member    User     @relation(fields: [memberId], references: [id])
  memberId  String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  role      TeamRole @default(REVIEWER)
  createdAt DateTime @default(now())

  @@id([memberId, teamId])
  @@map("teams_members")
}

enum TeamRole {
  OWNER
  MEMBER
  REVIEWER
}

model Proposal {
  id                 String              @id @default(cuid())
  talkId             String?
  talk               Talk?               @relation(fields: [talkId], references: [id])
  eventId            String
  event              Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  title              String
  abstract           String
  level              TalkLevel?
  languages          Json                @default("[]")
  references         String?
  speakers           EventSpeaker[]      @relation("proposals_speakers")
  formats            EventFormat[]       @relation("proposals_formats")
  categories         EventCategory[]     @relation("proposals_categories")
  tags               EventProposalTag[]  @relation("proposal_to_event_proposal_tags")
  reviews            Review[]
  avgRateForSort     Float?
  isDraft            Boolean             @default(true)
  submittedAt        DateTime            @default(now())
  deliberationStatus DeliberationStatus  @default(PENDING)
  publicationStatus  PublicationStatus   @default(NOT_PUBLISHED)
  confirmationStatus ConfirmationStatus?
  invitationCode     String              @unique @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  migrationId        String?
  comments           Comment[]
  ScheduleSession    ScheduleSession[]

  @@unique([talkId, eventId])
  @@map("proposals")
}

enum DeliberationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PublicationStatus {
  NOT_PUBLISHED
  PUBLISHED
}

enum ConfirmationStatus {
  PENDING
  CONFIRMED
  DECLINED
}

model EventSpeaker {
  id          String     @id @default(cuid())
  name        String
  email       String
  bio         String?
  picture     String?
  company     String?
  location    String?
  references  String?
  socialLinks Json       @default("[]")
  locale      String     @default("en")
  eventId     String
  event       Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])
  proposals   Proposal[] @relation("proposals_speakers")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("event_speakers")
}

model Survey {
  id          String   @unique @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  answers     Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  migrationId String?

  @@unique([userId, eventId])
  @@map("surveys")
}

model Review {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  proposalId  String
  proposal    Proposal      @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  feeling     ReviewFeeling @default(NEUTRAL)
  note        Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  migrationId String?

  @@unique([userId, proposalId])
  @@index([proposalId, feeling])
  @@map("reviews")
}

enum ReviewFeeling {
  POSITIVE
  NEGATIVE
  NEUTRAL
  NO_OPINION
}

model Comment {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  proposalId  String
  proposal    Proposal          @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  comment     String
  channel     CommentChannel
  reactions   CommentReaction[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  migrationId String?

  @@map("comments")
}

enum CommentChannel {
  ORGANIZER
  SPEAKER
}

model CommentReaction {
  id        String  @id @default(cuid())
  code      String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  reactedBy User    @relation(fields: [userId], references: [id])

  @@unique([userId, commentId, code])
  @@map("comment_reactions")
}

model Schedule {
  id                  String            @id @default(cuid())
  eventId             String
  event               Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  name                String
  timezone            String
  start               DateTime
  end                 DateTime
  displayStartMinutes Int
  displayEndMinutes   Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  tracks              ScheduleTrack[]
  sessions            ScheduleSession[]

  @@map("schedules")
}

model ScheduleTrack {
  id              String            @id @default(cuid())
  name            String
  scheduleId      String
  schedule        Schedule          @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  ScheduleSession ScheduleSession[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("schedule_tracks")
}

model ScheduleSession {
  id         String        @id @default(cuid())
  name       String?
  color      String
  language   String?
  emojis     String[]      @default([])
  start      DateTime
  end        DateTime
  scheduleId String
  schedule   Schedule      @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  trackId    String
  track      ScheduleTrack @relation(fields: [trackId], references: [id], onDelete: Cascade)
  proposalId String?
  proposal   Proposal?     @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("schedule_sessions")
}

model EventEmailCustomization {
  id        String   @id @default(cuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  template  String
  locale    String
  subject   String?
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, template, locale])
  @@map("event_email_customizations")
}

model FeatureFlag {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feature_flags")
}
