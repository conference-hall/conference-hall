generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String
  emailVerified         Boolean                @default(false)
  termsAccepted         Boolean                @default(false)
  bio                   String?
  picture               String?
  company               String?
  references            String?
  location              String?
  socials               Json                   @default("{}")
  admin                 Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  migrationId           String?
  organizerKey          String?
  organizerKeyAccess    OrganizerKeyAccess?    @relation(fields: [organizerKey], references: [id])
  talks                 Talk[]                 @relation("speakers_talks")
  proposals             Proposal[]             @relation("speakers_proposals")
  teams                 TeamMember[]
  reviews               Review[]
  surveys               Survey[]
  createdTalks          Talk[]
  createdEvents         Event[]
  comments              Comment[]
  authenticationMethods AuthenticationMethod[]

  @@map("users")
}

model AuthenticationMethod {
  uid       String   @id
  email     String
  name      String
  picture   String?
  provider  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authentication_methods")
}

model OrganizerKeyAccess {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  users     User[]

  @@map("organizer_key_access")
}

model Talk {
  id             String     @id @default(cuid())
  title          String
  abstract       String
  level          TalkLevel?
  languages      Json       @default("[]")
  references     String?
  creatorId      String
  creator        User       @relation(fields: [creatorId], references: [id])
  archived       Boolean    @default(false)
  invitationCode String     @unique @default(cuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  migrationId    String?
  speakers       User[]     @relation("speakers_talks")
  proposals      Proposal[]

  @@map("talks")
}

enum TalkLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Event {
  id                       String                   @id @default(cuid())
  slug                     String                   @unique
  name                     String
  description              String?
  type                     EventType                @default(CONFERENCE)
  visibility               EventVisibility          @default(PRIVATE)
  teamId                   String
  team                     Team                     @relation(fields: [teamId], references: [id])
  location                 String?
  onlineEvent              Boolean                  @default(false)
  timezone                 String
  lat                      Float?
  lng                      Float?
  contactEmail             String?
  websiteUrl               String?
  codeOfConductUrl         String?
  logoUrl                  String?
  conferenceStart          DateTime?
  conferenceEnd            DateTime?
  cfpStart                 DateTime?
  cfpEnd                   DateTime?
  formats                  EventFormat[]
  formatsRequired          Boolean                  @default(false)
  formatsAllowMultiple     Boolean                  @default(false)
  categories               EventCategory[]
  categoriesRequired       Boolean                  @default(false)
  categoriesAllowMultiple  Boolean                  @default(false)
  maxProposals             Int?
  creatorId                String
  creator                  User                     @relation(fields: [creatorId], references: [id])
  archived                 Boolean                  @default(false)
  reviewEnabled            Boolean                  @default(true)
  displayProposalsReviews  Boolean                  @default(true)
  displayProposalsSpeakers Boolean                  @default(true)
  surveyEnabled            Boolean                  @default(false)
  surveyQuestions          Json                     @default("[]")
  emailOrganizer           String?
  emailNotifications       Json                     @default("[]")
  slackWebhookUrl          String?
  apiKey                   String?
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  migrationId              String?
  proposals                Proposal[]
  surveys                  Survey[]
  schedules                Schedule[]
  integrations             EventIntegrationConfig[]

  @@map("events")
}

enum EventType {
  MEETUP
  CONFERENCE
}

enum EventVisibility {
  PUBLIC
  PRIVATE
}

model EventFormat {
  id          String     @id @default(cuid())
  name        String
  description String?
  migrationId String?
  event       Event      @relation(fields: [eventId], references: [id])
  eventId     String
  proposals   Proposal[] @relation("proposals_formats")

  @@map("event_formats")
}

model EventCategory {
  id          String     @id @default(cuid())
  name        String
  description String?
  migrationId String?
  event       Event      @relation(fields: [eventId], references: [id])
  eventId     String
  proposals   Proposal[] @relation("proposals_categories")

  @@map("event_categories")
}

model EventIntegrationConfig {
  id            String               @id @default(cuid())
  name          EventIntegrationName
  configuration Json                 @default("{}")
  event         Event                @relation(fields: [eventId], references: [id])
  eventId       String

  @@map("event_integration_configurations")
}

enum EventIntegrationName {
  OPEN_PLANNER
}

model Team {
  id             String       @id @default(cuid())
  name           String
  slug           String       @unique
  invitationCode String       @unique @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  migrationId    String?
  members        TeamMember[]
  events         Event[]

  @@map("teams")
}

model TeamMember {
  member    User     @relation(fields: [memberId], references: [id])
  memberId  String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  role      TeamRole @default(REVIEWER)
  createdAt DateTime @default(now())

  @@id([memberId, teamId])
  @@map("teams_members")
}

enum TeamRole {
  OWNER
  MEMBER
  REVIEWER
}

model Proposal {
  id                 String              @id @default(cuid())
  talkId             String?
  talk               Talk?               @relation(fields: [talkId], references: [id])
  eventId            String
  event              Event               @relation(fields: [eventId], references: [id])
  title              String
  abstract           String
  level              TalkLevel?
  languages          Json                @default("[]")
  references         String?
  speakers           User[]              @relation("speakers_proposals")
  formats            EventFormat[]       @relation("proposals_formats")
  categories         EventCategory[]     @relation("proposals_categories")
  reviews            Review[]
  avgRateForSort     Float?
  isDraft            Boolean             @default(true)
  submittedAt        DateTime            @default(now())
  deliberationStatus DeliberationStatus  @default(PENDING)
  publicationStatus  PublicationStatus   @default(NOT_PUBLISHED)
  confirmationStatus ConfirmationStatus?
  invitationCode     String              @unique @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  migrationId        String?
  comments           Comment[]
  ScheduleSession    ScheduleSession[]

  @@unique([talkId, eventId])
  @@map("proposals")
}

enum DeliberationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PublicationStatus {
  NOT_PUBLISHED
  PUBLISHED
}

enum ConfirmationStatus {
  PENDING
  CONFIRMED
  DECLINED
}

model Survey {
  id          String   @unique @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id])
  answers     Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  migrationId String?

  @@unique([userId, eventId])
  @@map("surveys")
}

model Review {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  proposalId  String
  proposal    Proposal      @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  feeling     ReviewFeeling @default(NEUTRAL)
  note        Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  migrationId String?

  @@unique([userId, proposalId])
  @@index([proposalId, feeling])
  @@map("reviews")
}

enum ReviewFeeling {
  POSITIVE
  NEGATIVE
  NEUTRAL
  NO_OPINION
}

model Comment {
  id          String         @id @default(cuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  proposalId  String
  proposal    Proposal       @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  comment     String
  channel     CommentChannel
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  migrationId String?

  @@map("comments")
}

enum CommentChannel {
  ORGANIZER
  SPEAKER
}

model Schedule {
  id                  String            @id @default(cuid())
  eventId             String
  event               Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  name                String
  timezone            String
  start               DateTime
  end                 DateTime
  displayStartMinutes Int
  displayEndMinutes   Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  tracks              ScheduleTrack[]
  sessions            ScheduleSession[]

  @@map("schedules")
}

model ScheduleTrack {
  id              String            @id @default(cuid())
  name            String
  scheduleId      String
  schedule        Schedule          @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  ScheduleSession ScheduleSession[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("schedule_tracks")
}

model ScheduleSession {
  id         String        @id @default(cuid())
  name       String?
  color      String
  start      DateTime
  end        DateTime
  scheduleId String
  schedule   Schedule      @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  trackId    String
  track      ScheduleTrack @relation(fields: [trackId], references: [id], onDelete: Cascade)
  proposalId String?
  proposal   Proposal?     @relation(fields: [proposalId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("schedule_sessions")
}
